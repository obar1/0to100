WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:02.350 align:start position:0%
 
python<00:00:00.919><c> a</c><00:00:01.160><c> highlevel</c><00:00:01.719><c> interpreted</c>

00:00:02.350 --> 00:00:02.360 align:start position:0%
python a highlevel interpreted
 

00:00:02.360 --> 00:00:04.230 align:start position:0%
python a highlevel interpreted
programming<00:00:02.879><c> language</c><00:00:03.360><c> famous</c><00:00:03.760><c> for</c><00:00:04.040><c> its</c>

00:00:04.230 --> 00:00:04.240 align:start position:0%
programming language famous for its
 

00:00:04.240 --> 00:00:06.430 align:start position:0%
programming language famous for its
zen-like<00:00:04.680><c> code</c><00:00:05.279><c> it's</c><00:00:05.480><c> arguably</c><00:00:06.000><c> the</c><00:00:06.120><c> most</c>

00:00:06.430 --> 00:00:06.440 align:start position:0%
zen-like code it's arguably the most
 

00:00:06.440 --> 00:00:08.110 align:start position:0%
zen-like code it's arguably the most
popular<00:00:06.839><c> language</c><00:00:07.200><c> in</c><00:00:07.279><c> the</c><00:00:07.439><c> world</c><00:00:07.839><c> because</c>

00:00:08.110 --> 00:00:08.120 align:start position:0%
popular language in the world because
 

00:00:08.120 --> 00:00:10.310 align:start position:0%
popular language in the world because
it's<00:00:08.320><c> easy</c><00:00:08.519><c> to</c><00:00:08.679><c> learn</c><00:00:09.200><c> yet</c><00:00:09.480><c> practical</c><00:00:10.000><c> for</c>

00:00:10.310 --> 00:00:10.320 align:start position:0%
it's easy to learn yet practical for
 

00:00:10.320 --> 00:00:12.509 align:start position:0%
it's easy to learn yet practical for
serious<00:00:10.840><c> projects</c><00:00:11.519><c> in</c><00:00:11.679><c> fact</c><00:00:12.000><c> you're</c><00:00:12.200><c> watching</c>

00:00:12.509 --> 00:00:12.519 align:start position:0%
serious projects in fact you're watching
 

00:00:12.519 --> 00:00:14.549 align:start position:0%
serious projects in fact you're watching
this<00:00:12.719><c> YouTube</c><00:00:13.080><c> video</c><00:00:13.440><c> in</c><00:00:13.599><c> a</c><00:00:13.880><c> python</c><00:00:14.280><c> web</c>

00:00:14.549 --> 00:00:14.559 align:start position:0%
this YouTube video in a python web
 

00:00:14.559 --> 00:00:16.310 align:start position:0%
this YouTube video in a python web
application<00:00:15.160><c> right</c><00:00:15.320><c> now</c><00:00:15.559><c> it</c><00:00:15.679><c> was</c><00:00:15.799><c> created</c><00:00:16.160><c> by</c>

00:00:16.310 --> 00:00:16.320 align:start position:0%
application right now it was created by
 

00:00:16.320 --> 00:00:19.029 align:start position:0%
application right now it was created by
Guido<00:00:16.680><c> van</c><00:00:16.920><c> rossom</c><00:00:17.480><c> and</c><00:00:17.600><c> released</c><00:00:17.960><c> in</c><00:00:18.080><c> 1991</c>

00:00:19.029 --> 00:00:19.039 align:start position:0%
Guido van rossom and released in 1991
 

00:00:19.039 --> 00:00:21.189 align:start position:0%
Guido van rossom and released in 1991
who<00:00:19.160><c> named</c><00:00:19.439><c> it</c><00:00:19.680><c> after</c><00:00:19.920><c> Monty</c><00:00:20.400><c> Python's</c><00:00:20.840><c> Flying</c>

00:00:21.189 --> 00:00:21.199 align:start position:0%
who named it after Monty Python's Flying
 

00:00:21.199 --> 00:00:22.870 align:start position:0%
who named it after Monty Python's Flying
Circus<00:00:21.840><c> which</c><00:00:21.960><c> is</c><00:00:22.119><c> why</c><00:00:22.240><c> you'll</c><00:00:22.640><c> sometimes</c>

00:00:22.870 --> 00:00:22.880 align:start position:0%
Circus which is why you'll sometimes
 

00:00:22.880 --> 00:00:25.230 align:start position:0%
Circus which is why you'll sometimes
find<00:00:23.080><c> spaming</c><00:00:23.599><c> eggs</c><00:00:24.080><c> instead</c><00:00:24.320><c> of</c><00:00:24.439><c> Foo</c><00:00:24.680><c> and</c><00:00:24.840><c> bar</c>

00:00:25.230 --> 00:00:25.240 align:start position:0%
find spaming eggs instead of Foo and bar
 

00:00:25.240 --> 00:00:27.269 align:start position:0%
find spaming eggs instead of Foo and bar
and<00:00:25.439><c> code</c><00:00:25.720><c> samples</c><00:00:26.320><c> it's</c><00:00:26.519><c> commonly</c><00:00:26.880><c> used</c><00:00:27.160><c> to</c>

00:00:27.269 --> 00:00:27.279 align:start position:0%
and code samples it's commonly used to
 

00:00:27.279 --> 00:00:29.269 align:start position:0%
and code samples it's commonly used to
build<00:00:27.480><c> serers</c><00:00:27.840><c> side</c><00:00:28.039><c> applications</c><00:00:28.880><c> like</c><00:00:29.080><c> web</c>

00:00:29.269 --> 00:00:29.279 align:start position:0%
build serers side applications like web
 

00:00:29.279 --> 00:00:31.109 align:start position:0%
build serers side applications like web
apps<00:00:29.519><c> with</c><00:00:29.640><c> the</c><00:00:30.240><c> framework</c><00:00:30.759><c> and</c><00:00:30.880><c> is</c><00:00:31.000><c> the</c>

00:00:31.109 --> 00:00:31.119 align:start position:0%
apps with the framework and is the
 

00:00:31.119 --> 00:00:33.470 align:start position:0%
apps with the framework and is the
language<00:00:31.400><c> of</c><00:00:31.560><c> choice</c><00:00:31.960><c> for</c><00:00:32.239><c> Big</c><00:00:32.439><c> Data</c><00:00:32.800><c> analysis</c>

00:00:33.470 --> 00:00:33.480 align:start position:0%
language of choice for Big Data analysis
 

00:00:33.480 --> 00:00:35.110 align:start position:0%
language of choice for Big Data analysis
and<00:00:33.640><c> machine</c><00:00:33.960><c> learning</c><00:00:34.520><c> many</c><00:00:34.719><c> students</c>

00:00:35.110 --> 00:00:35.120 align:start position:0%
and machine learning many students
 

00:00:35.120 --> 00:00:37.150 align:start position:0%
and machine learning many students
choose<00:00:35.480><c> python</c><00:00:35.879><c> to</c><00:00:36.040><c> start</c><00:00:36.280><c> learning</c><00:00:36.559><c> decode</c>

00:00:37.150 --> 00:00:37.160 align:start position:0%
choose python to start learning decode
 

00:00:37.160 --> 00:00:39.110 align:start position:0%
choose python to start learning decode
because<00:00:37.320><c> of</c><00:00:37.399><c> its</c><00:00:37.600><c> emphasis</c><00:00:38.079><c> on</c><00:00:38.239><c> readability</c>

00:00:39.110 --> 00:00:39.120 align:start position:0%
because of its emphasis on readability
 

00:00:39.120 --> 00:00:41.229 align:start position:0%
because of its emphasis on readability
as<00:00:39.320><c> outlined</c><00:00:39.879><c> by</c><00:00:40.000><c> the</c><00:00:40.160><c> Zen</c><00:00:40.440><c> of</c><00:00:40.680><c> python</c>

00:00:41.229 --> 00:00:41.239 align:start position:0%
as outlined by the Zen of python
 

00:00:41.239 --> 00:00:43.029 align:start position:0%
as outlined by the Zen of python
beautiful<00:00:41.640><c> is</c><00:00:41.760><c> better</c><00:00:42.000><c> than</c><00:00:42.160><c> ugly</c><00:00:42.719><c> while</c>

00:00:43.029 --> 00:00:43.039 align:start position:0%
beautiful is better than ugly while
 

00:00:43.039 --> 00:00:45.270 align:start position:0%
beautiful is better than ugly while
explicit<00:00:43.680><c> is</c><00:00:43.840><c> better</c><00:00:44.079><c> than</c><00:00:44.360><c> implicit</c><00:00:44.960><c> python</c>

00:00:45.270 --> 00:00:45.280 align:start position:0%
explicit is better than implicit python
 

00:00:45.280 --> 00:00:47.229 align:start position:0%
explicit is better than implicit python
is<00:00:45.440><c> very</c><00:00:45.640><c> simple</c><00:00:46.160><c> but</c><00:00:46.280><c> avoids</c><00:00:46.600><c> the</c><00:00:46.760><c> temptation</c>

00:00:47.229 --> 00:00:47.239 align:start position:0%
is very simple but avoids the temptation
 

00:00:47.239 --> 00:00:49.150 align:start position:0%
is very simple but avoids the temptation
to<00:00:47.440><c> sprinkle</c><00:00:47.840><c> in</c><00:00:48.079><c> Magic</c><00:00:48.520><c> that</c><00:00:48.680><c> causes</c>

00:00:49.150 --> 00:00:49.160 align:start position:0%
to sprinkle in Magic that causes
 

00:00:49.160 --> 00:00:51.430 align:start position:0%
to sprinkle in Magic that causes
ambiguity<00:00:49.960><c> its</c><00:00:50.120><c> code</c><00:00:50.360><c> is</c><00:00:50.559><c> often</c><00:00:50.879><c> organized</c>

00:00:51.430 --> 00:00:51.440 align:start position:0%
ambiguity its code is often organized
 

00:00:51.440 --> 00:00:53.349 align:start position:0%
ambiguity its code is often organized
into<00:00:51.719><c> notebooks</c><00:00:52.399><c> where</c><00:00:52.559><c> individual</c><00:00:53.039><c> cells</c>

00:00:53.349 --> 00:00:53.359 align:start position:0%
into notebooks where individual cells
 

00:00:53.359 --> 00:00:55.590 align:start position:0%
into notebooks where individual cells
can<00:00:53.520><c> be</c><00:00:53.680><c> executed</c><00:00:54.440><c> then</c><00:00:54.760><c> documented</c><00:00:55.320><c> in</c><00:00:55.480><c> the</c>

00:00:55.590 --> 00:00:55.600 align:start position:0%
can be executed then documented in the
 

00:00:55.600 --> 00:00:57.310 align:start position:0%
can be executed then documented in the
same<00:00:55.920><c> place</c><00:00:56.320><c> we're</c><00:00:56.480><c> currently</c><00:00:56.879><c> at</c><00:00:57.039><c> version</c>

00:00:57.310 --> 00:00:57.320 align:start position:0%
same place we're currently at version
 

00:00:57.320 --> 00:00:58.790 align:start position:0%
same place we're currently at version
three<00:00:57.520><c> of</c><00:00:57.600><c> the</c><00:00:57.719><c> language</c><00:00:58.320><c> and</c><00:00:58.399><c> you</c><00:00:58.480><c> can</c><00:00:58.640><c> get</c>

00:00:58.790 --> 00:00:58.800 align:start position:0%
three of the language and you can get
 

00:00:58.800 --> 00:01:01.069 align:start position:0%
three of the language and you can get
started<00:00:59.199><c> by</c><00:00:59.320><c> creating</c><00:00:59.640><c> a</c><00:01:00.000><c> file</c><00:01:00.239><c> that</c><00:01:00.359><c> ends</c><00:01:00.600><c> in</c>

00:01:01.069 --> 00:01:01.079 align:start position:0%
started by creating a file that ends in
 

00:01:01.079 --> 00:01:04.109 align:start position:0%
started by creating a file that ends in
py<00:01:01.600><c> or</c><00:01:02.039><c> iynb</c><00:01:03.000><c> to</c><00:01:03.239><c> create</c><00:01:03.480><c> an</c><00:01:03.600><c> interactive</c>

00:01:04.109 --> 00:01:04.119 align:start position:0%
py or iynb to create an interactive
 

00:01:04.119 --> 00:01:06.310 align:start position:0%
py or iynb to create an interactive
notebook<00:01:04.680><c> create</c><00:01:04.920><c> a</c><00:01:05.040><c> variable</c><00:01:05.560><c> by</c><00:01:05.720><c> setting</c><00:01:06.080><c> a</c>

00:01:06.310 --> 00:01:06.320 align:start position:0%
notebook create a variable by setting a
 

00:01:06.320 --> 00:01:08.390 align:start position:0%
notebook create a variable by setting a
name<00:01:06.680><c> equal</c><00:01:06.960><c> to</c><00:01:07.119><c> a</c><00:01:07.320><c> value</c><00:01:07.759><c> it's</c><00:01:08.080><c> strongly</c>

00:01:08.390 --> 00:01:08.400 align:start position:0%
name equal to a value it's strongly
 

00:01:08.400 --> 00:01:10.070 align:start position:0%
name equal to a value it's strongly
typed<00:01:08.759><c> which</c><00:01:08.880><c> means</c><00:01:09.159><c> values</c><00:01:09.439><c> won't</c><00:01:09.640><c> change</c><00:01:09.880><c> in</c>

00:01:10.070 --> 00:01:10.080 align:start position:0%
typed which means values won't change in
 

00:01:10.080 --> 00:01:12.390 align:start position:0%
typed which means values won't change in
unexpected<00:01:10.680><c> ways</c><00:01:11.159><c> but</c><00:01:11.360><c> Dynamic</c><00:01:11.920><c> so</c><00:01:12.159><c> type</c>

00:01:12.390 --> 00:01:12.400 align:start position:0%
unexpected ways but Dynamic so type
 

00:01:12.400 --> 00:01:14.390 align:start position:0%
unexpected ways but Dynamic so type
annotations<00:01:12.960><c> are</c><00:01:13.119><c> not</c><00:01:13.320><c> required</c><00:01:13.840><c> the</c><00:01:13.960><c> syntax</c>

00:01:14.390 --> 00:01:14.400 align:start position:0%
annotations are not required the syntax
 

00:01:14.400 --> 00:01:16.149 align:start position:0%
annotations are not required the syntax
is<00:01:14.560><c> highly</c><00:01:14.880><c> efficient</c><00:01:15.520><c> allowing</c><00:01:15.840><c> you</c><00:01:16.000><c> to</c>

00:01:16.149 --> 00:01:16.159 align:start position:0%
is highly efficient allowing you to
 

00:01:16.159 --> 00:01:17.830 align:start position:0%
is highly efficient allowing you to
declare<00:01:16.479><c> multiple</c><00:01:16.880><c> variables</c><00:01:17.240><c> on</c><00:01:17.400><c> a</c><00:01:17.520><c> single</c>

00:01:17.830 --> 00:01:17.840 align:start position:0%
declare multiple variables on a single
 

00:01:17.840 --> 00:01:19.990 align:start position:0%
declare multiple variables on a single
line<00:01:18.200><c> and</c><00:01:18.360><c> Define</c><00:01:18.680><c> tupal</c><00:01:19.360><c> lists</c><00:01:19.759><c> and</c>

00:01:19.990 --> 00:01:20.000 align:start position:0%
line and Define tupal lists and
 

00:01:20.000 --> 00:01:21.990 align:start position:0%
line and Define tupal lists and
dictionaries<00:01:20.759><c> with</c><00:01:20.880><c> a</c><00:01:21.040><c> literal</c><00:01:21.439><c> syntax</c>

00:01:21.990 --> 00:01:22.000 align:start position:0%
dictionaries with a literal syntax
 

00:01:22.000 --> 00:01:23.789 align:start position:0%
dictionaries with a literal syntax
semicolons<00:01:22.600><c> are</c><00:01:22.720><c> not</c><00:01:22.920><c> required</c><00:01:23.479><c> and</c><00:01:23.600><c> if</c><00:01:23.680><c> you</c>

00:01:23.789 --> 00:01:23.799 align:start position:0%
semicolons are not required and if you
 

00:01:23.799 --> 00:01:26.030 align:start position:0%
semicolons are not required and if you
use<00:01:24.119><c> them</c><00:01:24.320><c> and</c><00:01:24.560><c> experience</c><00:01:25.079><c> pythonista</c><00:01:25.880><c> will</c>

00:01:26.030 --> 00:01:26.040 align:start position:0%
use them and experience pythonista will
 

00:01:26.040 --> 00:01:27.870 align:start position:0%
use them and experience pythonista will
say<00:01:26.240><c> that</c><00:01:26.360><c> your</c><00:01:26.600><c> code</c><00:01:26.840><c> is</c><00:01:27.000><c> not</c><00:01:27.200><c> pythonic</c>

00:01:27.870 --> 00:01:27.880 align:start position:0%
say that your code is not pythonic
 

00:01:27.880 --> 00:01:29.990 align:start position:0%
say that your code is not pythonic
instead<00:01:28.159><c> of</c><00:01:28.280><c> semicolons</c><00:01:29.159><c> python</c><00:01:29.520><c> uses</c>

00:01:29.990 --> 00:01:30.000 align:start position:0%
instead of semicolons python uses
 

00:01:30.000 --> 00:01:32.149 align:start position:0%
instead of semicolons python uses
indentation<00:01:30.840><c> to</c><00:01:31.079><c> terminate</c><00:01:31.600><c> or</c><00:01:31.759><c> determine</c>

00:01:32.149 --> 00:01:32.159 align:start position:0%
indentation to terminate or determine
 

00:01:32.159 --> 00:01:34.030 align:start position:0%
indentation to terminate or determine
the<00:01:32.320><c> scope</c><00:01:32.600><c> of</c><00:01:32.720><c> a</c><00:01:32.840><c> line</c><00:01:33.040><c> of</c><00:01:33.159><c> code</c><00:01:33.640><c> Define</c><00:01:33.880><c> a</c>

00:01:34.030 --> 00:01:34.040 align:start position:0%
the scope of a line of code Define a
 

00:01:34.040 --> 00:01:35.670 align:start position:0%
the scope of a line of code Define a
function<00:01:34.439><c> with</c><00:01:34.560><c> the</c><00:01:34.680><c> def</c><00:01:34.960><c> keyword</c><00:01:35.479><c> then</c>

00:01:35.670 --> 00:01:35.680 align:start position:0%
function with the def keyword then
 

00:01:35.680 --> 00:01:37.550 align:start position:0%
function with the def keyword then
indent<00:01:36.040><c> the</c><00:01:36.200><c> next</c><00:01:36.439><c> line</c><00:01:36.799><c> usually</c><00:01:37.159><c> by</c><00:01:37.280><c> four</c>

00:01:37.550 --> 00:01:37.560 align:start position:0%
indent the next line usually by four
 

00:01:37.560 --> 00:01:39.710 align:start position:0%
indent the next line usually by four
spaces<00:01:38.200><c> to</c><00:01:38.399><c> define</c><00:01:38.680><c> the</c><00:01:38.799><c> function</c><00:01:39.159><c> body</c><00:01:39.600><c> we</c>

00:01:39.710 --> 00:01:39.720 align:start position:0%
spaces to define the function body we
 

00:01:39.720 --> 00:01:41.190 align:start position:0%
spaces to define the function body we
might<00:01:39.920><c> then</c><00:01:40.079><c> add</c><00:01:40.240><c> a</c><00:01:40.320><c> for</c><00:01:40.600><c> Loop</c><00:01:40.799><c> to</c><00:01:40.920><c> it</c><00:01:41.079><c> and</c>

00:01:41.190 --> 00:01:41.200 align:start position:0%
might then add a for Loop to it and
 

00:01:41.200 --> 00:01:43.510 align:start position:0%
might then add a for Loop to it and
indent<00:01:41.640><c> that</c><00:01:41.840><c> by</c><00:01:42.040><c> another</c><00:01:42.320><c> four</c><00:01:42.600><c> spaces</c><00:01:43.399><c> this</c>

00:01:43.510 --> 00:01:43.520 align:start position:0%
indent that by another four spaces this
 

00:01:43.520 --> 00:01:45.469 align:start position:0%
indent that by another four spaces this
eliminates<00:01:43.960><c> the</c><00:01:44.079><c> need</c><00:01:44.240><c> for</c><00:01:44.479><c> curly</c><00:01:44.840><c> braces</c><00:01:45.320><c> and</c>

00:01:45.469 --> 00:01:45.479 align:start position:0%
eliminates the need for curly braces and
 

00:01:45.479 --> 00:01:47.749 align:start position:0%
eliminates the need for curly braces and
semicolons<00:01:46.240><c> found</c><00:01:46.479><c> in</c><00:01:46.680><c> many</c><00:01:46.920><c> other</c><00:01:47.159><c> languages</c>

00:01:47.749 --> 00:01:47.759 align:start position:0%
semicolons found in many other languages
 

00:01:47.759 --> 00:01:49.749 align:start position:0%
semicolons found in many other languages
python<00:01:48.119><c> is</c><00:01:48.240><c> a</c><00:01:48.360><c> multiparadigm</c><00:01:49.200><c> language</c><00:01:49.640><c> we</c>

00:01:49.749 --> 00:01:49.759 align:start position:0%
python is a multiparadigm language we
 

00:01:49.759 --> 00:01:51.030 align:start position:0%
python is a multiparadigm language we
can<00:01:49.880><c> apply</c><00:01:50.200><c> functional</c><00:01:50.600><c> programming</c>

00:01:51.030 --> 00:01:51.040 align:start position:0%
can apply functional programming
 

00:01:51.040 --> 00:01:52.630 align:start position:0%
can apply functional programming
patterns<00:01:51.560><c> with</c><00:01:51.719><c> things</c><00:01:51.920><c> like</c><00:01:52.119><c> Anonymous</c>

00:01:52.630 --> 00:01:52.640 align:start position:0%
patterns with things like Anonymous
 

00:01:52.640 --> 00:01:54.749 align:start position:0%
patterns with things like Anonymous
functions<00:01:53.040><c> using</c><00:01:53.399><c> Lambda</c><00:01:53.960><c> it</c><00:01:54.119><c> also</c><00:01:54.320><c> uses</c>

00:01:54.749 --> 00:01:54.759 align:start position:0%
functions using Lambda it also uses
 

00:01:54.759 --> 00:01:56.630 align:start position:0%
functions using Lambda it also uses
objects<00:01:55.159><c> as</c><00:01:55.280><c> an</c><00:01:55.439><c> abstraction</c><00:01:55.920><c> for</c><00:01:56.159><c> data</c>

00:01:56.630 --> 00:01:56.640 align:start position:0%
objects as an abstraction for data
 

00:01:56.640 --> 00:01:58.590 align:start position:0%
objects as an abstraction for data
allowing<00:01:56.960><c> you</c><00:01:57.079><c> to</c><00:01:57.280><c> implement</c><00:01:57.799><c> objectoriented</c>

00:01:58.590 --> 00:01:58.600 align:start position:0%
allowing you to implement objectoriented
 

00:01:58.600 --> 00:02:00.429 align:start position:0%
allowing you to implement objectoriented
patterns<00:01:59.159><c> with</c><00:01:59.280><c> things</c><00:01:59.479><c> like</c><00:01:59.920><c> classes</c><00:02:00.280><c> and</c>

00:02:00.429 --> 00:02:00.439 align:start position:0%
patterns with things like classes and
 

00:02:00.439 --> 00:02:03.069 align:start position:0%
patterns with things like classes and
inheritance<00:02:01.280><c> it</c><00:02:01.439><c> also</c><00:02:01.719><c> has</c><00:02:01.840><c> a</c><00:02:02.039><c> huge</c><00:02:02.320><c> ecosystem</c>

00:02:03.069 --> 00:02:03.079 align:start position:0%
inheritance it also has a huge ecosystem
 

00:02:03.079 --> 00:02:05.109 align:start position:0%
inheritance it also has a huge ecosystem
of<00:02:03.280><c> thirdparty</c><00:02:03.680><c> libraries</c><00:02:04.520><c> such</c><00:02:04.719><c> as</c><00:02:04.920><c> deep</c>

00:02:05.109 --> 00:02:05.119 align:start position:0%
of thirdparty libraries such as deep
 

00:02:05.119 --> 00:02:07.029 align:start position:0%
of thirdparty libraries such as deep
learning<00:02:05.479><c> Frameworks</c><00:02:05.960><c> like</c><00:02:06.079><c> tensorflow</c><00:02:06.880><c> and</c>

00:02:07.029 --> 00:02:07.039 align:start position:0%
learning Frameworks like tensorflow and
 

00:02:07.039 --> 00:02:08.589 align:start position:0%
learning Frameworks like tensorflow and
rappers<00:02:07.399><c> for</c><00:02:07.600><c> many</c><00:02:07.960><c> high</c><00:02:08.160><c> performance</c>

00:02:08.589 --> 00:02:08.599 align:start position:0%
rappers for many high performance
 

00:02:08.599 --> 00:02:10.669 align:start position:0%
rappers for many high performance
low-level<00:02:09.160><c> packages</c><00:02:09.720><c> like</c><00:02:09.920><c> open</c><00:02:10.280><c> computer</c>

00:02:10.669 --> 00:02:10.679 align:start position:0%
low-level packages like open computer
 

00:02:10.679 --> 00:02:12.510 align:start position:0%
low-level packages like open computer
vision<00:02:11.160><c> which</c><00:02:11.280><c> are</c><00:02:11.440><c> most</c><00:02:11.640><c> often</c><00:02:11.920><c> installed</c>

00:02:12.510 --> 00:02:12.520 align:start position:0%
vision which are most often installed
 

00:02:12.520 --> 00:02:14.509 align:start position:0%
vision which are most often installed
with<00:02:12.680><c> the</c><00:02:12.959><c> PIP</c><00:02:13.360><c> package</c><00:02:13.640><c> manager</c><00:02:14.280><c> this</c><00:02:14.400><c> has</c>

00:02:14.509 --> 00:02:14.519 align:start position:0%
with the PIP package manager this has
 

00:02:14.519 --> 00:02:16.550 align:start position:0%
with the PIP package manager this has
been<00:02:14.680><c> the</c><00:02:14.879><c> Python</c><00:02:15.239><c> programming</c><00:02:15.680><c> language</c><00:02:16.120><c> in</c>

00:02:16.550 --> 00:02:16.560 align:start position:0%
been the Python programming language in
 

00:02:16.560 --> 00:02:18.030 align:start position:0%
been the Python programming language in
100<00:02:16.800><c> seconds</c><00:02:17.280><c> hit</c><00:02:17.400><c> the</c><00:02:17.519><c> like</c><00:02:17.680><c> button</c><00:02:17.879><c> if</c><00:02:17.959><c> you</c>

00:02:18.030 --> 00:02:18.040 align:start position:0%
100 seconds hit the like button if you
 

00:02:18.040 --> 00:02:19.750 align:start position:0%
100 seconds hit the like button if you
want<00:02:18.160><c> to</c><00:02:18.239><c> see</c><00:02:18.400><c> more</c><00:02:18.519><c> short</c><00:02:18.840><c> videos</c><00:02:19.200><c> like</c><00:02:19.400><c> this</c>

00:02:19.750 --> 00:02:19.760 align:start position:0%
want to see more short videos like this
 

00:02:19.760 --> 00:02:21.630 align:start position:0%
want to see more short videos like this
thanks<00:02:19.959><c> for</c><00:02:20.200><c> watching</c><00:02:20.800><c> and</c><00:02:20.959><c> I</c><00:02:21.080><c> will</c><00:02:21.280><c> see</c><00:02:21.480><c> you</c>

00:02:21.630 --> 00:02:21.640 align:start position:0%
thanks for watching and I will see you
 

00:02:21.640 --> 00:02:25.160 align:start position:0%
thanks for watching and I will see you
in<00:02:21.800><c> the</c><00:02:21.959><c> next</c><00:02:22.160><c> one</c>

